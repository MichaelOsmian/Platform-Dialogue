<?xml version="1.0" encoding="UTF-8"?>
<domain>
<!-- 
******************************IMPORTANT NOTE******************************

1. Still do not understand the difference between util and prob
so this program does not fully utilize the use of prob and util.

2. Need to look at the better example to develop futher

Version: 1.05 FSMWORKS!

Patch note/Issues:
(12/07/2017 3PM) V1.05 Add How-to-use note.
(12/07/2017 3PM) V1.04 Fix FSM (remove next_state) and remove yes/no. Add goodbye and add repeat if prob lower than 0.2. (Trying to add function when user says something else)
(12/06/2017 12PM) V1.03 Attach NAO module for the demo and which will be tested before the demo.
(12/04/2017 9PM) V1.02 Implement the use of FSM (current_state, next_state) which prevents the code to jump around whenever the specified input is asserted.
Almost everything seems fine, but when you are asked if you want to do the task, if you say yes, the program will not show the expected result (Okay, start {task}ing!).
(12/04/2017 5PM) V1.01 Fix some bugs.
(12/04/2017 12PM) V1.00 KickStarter - Kick start the model for the demo. 

**************************************************************************

********************************HOW TO USE********************************

Whenever you say hi to the system, it will greet you and ask what you want to do. Currently the options are study, work, sleep.
This program also applies probability rule. Any input with probability lower than 0.2 will not be run. The system will ask user to repeat while also predict that the user will input
the same input. In order for the system to work according to the specified input, you need to be in that specific state, i.e. the system will not keep jumping around randomly when
the input is asserted.

You can say hi, start tasks, stop, and say goodbye.

**************************************************************************

-->

<!--Set up Nuance speech model-->
	<settings>
        <modules>opendial.plugins.NuanceSpeech</modules>
        <id>NMDPTRIAL_chairithinug_wisc_edu20171030172526</id>
        <key>09e2e4351f5aa7b809f5a8926c385a14b48ace2defd67dd23ff551071b111825f3fd5a125701cb61f773f363ab4d775fd7468dc61c0a985cffe9631bfb7c40ee</key>
        <lang>eng-USA</lang>
		
		

		<!--<modules>opendial.plugins.NaoASR,opendial.plugins.NaoBehaviour,opendial.plugins.NaoButton,opendial.plugins.NaoPerception,opendial.plugins.NaoTTS</modules>
		<nao_ip>add here the IP address of your robot</nao_ip>
		<grammar>add here the path to the BNF recognition grammar</secret>-->				
				
    </settings>
<!--initialize the system-->
	<initialstate>
		
		<variable id="current_state">
			<value>None</value>
		</variable>
		
	</initialstate>
<!--start the actual model-->	
	<model trigger="u_u">
		<rule id="initialize">
			<case>
				<condition operator="and">
					<if var="u_u" relation="in" value="[Hello, Hi, Good morning, Good afternoon, Good evening, Hey]"/>
					<if var="current_state" relation="=" value="None"/>
				</condition>
				<effect prob="1">
					<set var="a_u" value="user_greeting"/>
				</effect>
			</case>
		</rule>
		
		<rule id="command">
			<case id="task">
				<condition operator="and">
					<if var="task" relation="in" value="[sleep, work, study]"/>
					<if var="u_u" relation="contains" value="(I)? (have to|must|want|need|would like to|will)? {task}"/>
					<if var="current_state" relation="=" value="initialized"/>
				</condition>
				<effect prob="1">
					<set var="a_u" value="user_order({task})"/>
				</effect>
			</case>
			
			<case id="stop">
				<condition operator="and">
					<if var="stop" relation="in" value="[stop, quit, break, exit]"/>
					<if var="u_u" relation="contains" value="{stop}"/>
					<if var="current_state" relation="=" value="tasking({task})"/>
				</condition>
				<effect prob="1">
					<set var="a_u" value="user_stop({task})"/>
				</effect>
			</case>
		</rule>	
		
		<rule id="goodbye">
			<case>
				<condition>
					<if var="u_u" relation="in" value="[Bye, Goodbye, See you, leaving]"/>
				</condition>
				<effect prob="1">
					<set var="a_u" value="user_goodbye"/>
				</effect>
			</case>
		</rule>
		
		<!--<rule id="other" priority="1">
			<case>
			<condition>
					<if var="u_u" relation="!=" value="None"/>
				</condition>
				<effect>
					<set var="a_u" value="Other"/>
				</effect>
			</case>
		</rule>-->
			
	</model>
	
	<model trigger="a_u">
		<rule id="initialize">
			<case>
				<condition>
					<if var="a_u" relation="=" value="user_greeting"/>
				</condition>
				<effect util="1"> 
					<set var="a_m" value="machine_greeting"/>
				</effect>
			</case>
		</rule>
		
		<rule id="command">
			<case id="stop" priority="1">
				<condition>
					<if var="a_u" relation="=" value="user_stop({task})"/>
				</condition>
				<effect util="1"> 
					<set var="a_m" value="machine_stop({task})"/>
				</effect>
			</case>
			
			<case id="task">
				<condition>
					<if var="a_u" relation="=" value="user_order({task})"/>
				</condition>
				<effect util="1"> 
					<set var="a_m" value="machine_follow_order({task})"/>
				</effect>
			</case>
		</rule>
		
		<rule id="user_goodbye">
			<case>
				<condition>
					<if var="a_u" relation="=" value="user_goodbye"/>
				</condition>
				<effect util="1"> 
					<set var="a_m" value="machine_goodbye"/>
				</effect>
			</case>
		</rule>

		<!--<rule id ="threshold">
			<case>
				<effect util="-0.5">
					<set var="a_m" value="{a_m}"/>
				</effect>
			</case>
		</rule>-->
		
		<!--<rule id="other" priority="1">
			<case>
			<condition>
					<if var="a_u" relation="=" value="Other"/>
				</condition>
				<effect>
					<set var="a_m" value="Other"/>
				</effect>
			</case>
		</rule>-->			
		
		<rule id="repeat">
			<case>
				<effect util="0.2">
					<set var="a_m" value="AskRepeat" />
				</effect>
			</case>
		</rule>	
		
	</model>
	
	<model trigger="a_m">
		<rule id="initialize">
			<case>
				<condition>
					<if var="a_m" relation="=" value="machine_greeting"/>
				</condition>
				<effect util="1">
					<set var="u_m" value="Hi, I am Bucky. How can I help you?"/>
					<set var="current_state" value="initialized"/>
				</effect>
			</case>
		</rule>
		
		<rule id="command">
		
			<case id="stop" priority="1">
				<condition>
					<if var="a_m" relation="=" value="machine_stop({task})"/>
				</condition>
				<effect util="1">
					<set var="u_m" value="Stop {task}ing!"/>
					<set var="current_state" value="initialized"/>
				</effect>
			</case>
			
			<case id="task">
				<condition>
					<if var="a_m" relation="=" value="machine_follow_order({task})"/>
				</condition>
				<effect util="1">
					<set var="u_m" value="Okay, start {task}ing!"/>
					<set var="current_state" value="tasking({task})"/>
				</effect>
			</case>
		</rule>

		<rule id="goodbye">
			<case>
				<condition>
					<if var="a_m" relation="=" value="machine_goodbye"/>
				</condition>
				<effect util="1">
					<set var="u_m" value="Goodbye, see you again!"/>
					<set var="current_state" value="None"/>
				</effect>
			</case>
		</rule>
		
		<rule id="repeat">
			<case>
				<condition>
					<if var="a_m" value="AskRepeat" />
				</condition>
				<effect util="1">
					<set var="u_m" value="Sorry, could you repeat?" />
				</effect>
			</case>
		</rule>
		
		<rule id="prediction">
			<case>
				<condition>
					<if var="a_m" value="AskRepeat" />
				</condition>
				<effect prob="0.90">
					<set var="a_u^p" value="{a_u}" />
				</effect>
			</case>
		</rule>
		
		<!--<rule id="other" priority="1">
			<case>
			<condition>
					<if var="a_m" relation="=" value="Other"/>
				</condition>
				<effect>
					<set var="u_m" value="I do not understand what you say."/>
				</effect>
			</case>
		</rule>-->
		
		<!--<rule>
			<case>
				<effect>
					<set var="a_u-history" value="{a_u-history}+{a_u}"/>
				</effect>
			</case>
		</rule>-->
		
	</model>
	
	

</domain>
